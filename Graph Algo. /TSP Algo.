Approach: This problem can be solved using Technique. Below are the steps: 

1.Create two primary data holders: 
  i. A list that holds the indices of the cities in terms of the input matrix of distances between cities.
  ii. Result array which will have all cities that can be displayed out to the console in any manner.

2. Perform traversal on the given adjacency matrix tsp[][] for all the city and if the cost of the reaching any city from current city is less than current cost the update the cost.

3. Generate the minimum path cycle using the above step and return there minimum cost.

#include <stdio.h>
int tsp_g[10][10] = {
   {12, 30, 33, 10, 45},
   {56, 22, 9, 15, 18},
   {29, 13, 8, 5, 12},
   {33, 28, 16, 10, 3},
   {1, 4, 30, 24, 20}
};
int visited[10], n, cost = 0;

void travellingsalesman(int c){
   int k, adj_vertex = 999;
   int min = 999;
   
   /* marking the vertices visited in an assigned array */
   visited[c] = 1;
   
   printf("%d ", c + 1);
   
   for(k = 0; k < n; k++) {
      if((tsp_g[c][k] != 0) && (visited[k] == 0)) {
         if(tsp_g[c][k] < min) {
            min = tsp_g[c][k];
              }
         adj_vertex = k;
      }
   }
   if(min != 999) {
      cost = cost + min;
   }
   if(adj_vertex == 999) {
      adj_vertex = 0;
      printf("%d", adj_vertex + 1);
      cost = cost + tsp_g[c][adj_vertex];
      return;
   }
   travellingsalesman(adj_vertex);
}

int main(){
   int i, j;
   n = 5;
   for(i = 0; i < n; i++) {
      visited[i] = 0;
       }
   printf("\n\nShortest Path:\t");
   travellingsalesman(0);
   printf("\n\nMinimum Cost: \t");
   printf("%d\n", cost);
   return 0;
}

Time Complexity: O(N2*log2N) 
Auxiliary Space: O(N)
