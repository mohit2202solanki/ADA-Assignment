import numpy as np
import random

def generate_random_graph(num_vertices, edge_probability):
    adjacency_matrix = np.zeros((num_vertices, num_vertices), dtype=int)
    for i in range(num_vertices):
        for j in range(i + 1, num_vertices):
            if random.random() < edge_probability:
                adjacency_matrix[i][j] = 1
                adjacency_matrix[j][i] = 1
    return adjacency_matrix

def calculate_cut_value(cut, adjacency_matrix):
    num_vertices = len(cut)
    cut_value = 0
    for i in range(num_vertices):
        for j in range(i + 1, num_vertices):
            if cut[i] != cut[j]:
                cut_value += adjacency_matrix[i][j]
    return cut_value

def generate_initial_solution(num_vertices):
    return [random.choice([True, False]) for _ in range(num_vertices)]

def local_search(adjacency_matrix, num_vertices):
    current_cut = generate_initial_solution(num_vertices)
    best_cut = current_cut.copy()
    current_cut_value = calculate_cut_value(current_cut, adjacency_matrix)
    best_cut_value = current_cut_value

    max_iterations = 1000
    for iteration in range(max_iterations):
        # Select a random vertex to modify
        vertex = random.randint(0, num_vertices - 1)

        # Modify the cut of the selected vertex
        current_cut[vertex] = not current_cut[vertex]

        # Calculate the new cut value
        new_cut_value = calculate_cut_value(current_cut, adjacency_matrix)

        # If the new solution is better, update the best solution
        if new_cut_value > best_cut_value:
            best_cut = current_cut.copy()
            best_cut_value = new_cut_value
        else:
            # Revert the modification
            current_cut[vertex] = not current_cut[vertex]

    return best_cut, best_cut_value

# Example usage
num_vertices = 10
edge_probability = 0.5

adjacency_matrix = generate_random_graph(num_vertices, edge_probability)

# Local search algorithm
local_best_cut, local_best_cut_value = local_search(adjacency_matrix, num_vertices)
print("Local Search - Best Cut Value:", local_best_cut_value)
print("Cut:", local_best_cut)

# Randomized algorithm
random_best_cut_value = 0
for _ in range(1000):
    random_cut = generate_initial_solution(num_vertices)
    random_cut_value = calculate_cut_value(random_cut, adjacency_matrix)
    random_best_cut_value = max(random_best_cut_value, random_cut_value)
print("Randomized Algorithm - Best Cut Value:", random_best_cut_value)


This code generates a random graph with a given number of vertices and edge probability. It then applies both the local search algorithm and a randomized algorithm to find the best cut value. The local search algorithm iteratively improves a randomly generated initial solution, while the randomized algorithm 
generates multiple random solutions and selects the one with the highest cut value. Finally, the best cut values and corresponding cuts are printed for comparison.
